import apetiteFinanceiro.Conservador;import apetiteFinanceiro.Indiferente;import clube.Clube;import jogador.Atacante;import jogador.Goleiro;import jogador.Jogador;import negocios.Negociacao;import org.junit.Assert;import org.junit.Test;import java.math.BigDecimal;public class NegociacaoTest {    @Test    public void deveAtualizarOClubeDoJogadorQuandoOcorrerNegociacao() {        Negociacao negociacao = new Negociacao();        Clube gremio = new Clube("Grêmio", 10,BigDecimal.valueOf(1000));        Jogador novoJogador = new Jogador("Vitor",23,5, BigDecimal.valueOf(1000), null, new Conservador());        String clubeEsperado = "Grêmio";        negociacao.negociar(novoJogador, gremio);        Assert.assertSame(clubeEsperado, novoJogador.getClube());    }    @Test    public void deveSerPossivelNegociarUmGoleiroComUmClubeQueTemSaldoEmCaixa() {        Negociacao negociacao = new Negociacao();        Clube clube = new Clube("Grêmio", 10, BigDecimal.valueOf(100000000));        Goleiro novoGoleiro = new Goleiro("Vitor", 23, 5, BigDecimal.valueOf(100000), null, new Indiferente(), 1);        boolean foiPossivelNegociar = negociacao.negociar(novoGoleiro, clube);        Assert.assertTrue(foiPossivelNegociar);    }    @Test    public void naoDeveSerPossivelNegociarPorFaltaDeCaixaDisponivel() {        Negociacao negociacao = new Negociacao();        Clube clube = new Clube("Grêmio", 10, BigDecimal.valueOf(10));        Jogador novoGoleiro = new Jogador("Vitor", 23, 5, BigDecimal.valueOf(100000), null, new Indiferente());        boolean foiPossivelNegociar = negociacao.negociar(novoGoleiro, clube);        Assert.assertFalse(foiPossivelNegociar);    }    @Test    public void naoDeveSerPossivelNegociarUmAtacanteComUmClubeQueTemReputacaoHistoricaMenorQueASua() {        Clube gremio = new Clube("Grêmio", 6,BigDecimal.valueOf(10000));        Atacante lucas = new Atacante("Lucas",23,10,BigDecimal.valueOf(1000), null, new Indiferente(),0);        boolean temInteresse = lucas.interesseDeTransferencia(gremio);        Assert.assertFalse(temInteresse);    }}